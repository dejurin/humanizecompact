package locale_test

import (
	"testing"

	"github.com/dejurin/humanize-cldr"
	locale "github.com/dejurin/humanize-cldr/locales/bg"
)

func fallback(number string) string {
	return number
}

func TestHumanizeBgOptionLong(t *testing.T) {
	tests := []struct {
		number   string
		expected string
	}{
		{"1", "1"}, // fallback
		{"1000", "1 хил."},
		{"2000", "2 хиляди"},
		{"3000", "3 хиляди"},
		{"4000", "4 хиляди"},
		{"5000", "5 хиляди"},
		{"11000", "11 хиляди"},
		{"12000", "12 хиляди"},
		{"13000", "13 хиляди"},
		{"14000", "14 хиляди"},
		{"15000", "15 хиляди"},
		{"16000", "16 хиляди"},
		{"1000000", "1 милион"},
		{"1100000", "1,1 милион"},
		{"1200000", "1,2 милион"},
		{"1300000", "1,3 милион"},
		{"1400000", "1,4 милион"},
		{"1500000", "1,5 милиона"},
		{"1600000", "1,6 милиона"},
		{"1700000", "1,7 милиона"},
		{"1800000", "1,8 милиона"},
		{"1900000", "1,9 милиона"},
		{"10000000", "10 милиона"},
	}

	h := humanize.New(locale.Data, humanize.Long, fallback)

	for _, tt := range tests {
		res, err := h.Humanize(tt.number)
		if err != nil {
			t.Errorf("number %q => unexpected error: %v", tt.number, err)
			continue
		}
		if res != tt.expected {
			t.Errorf("number %q => got %q, want %q", tt.number, res, tt.expected)
		}
	}
}

func TestHumanizeBgOptionShort(t *testing.T) {
	tests := []struct {
		number   string
		expected string
	}{
		{"1000", "1 хил."},
		{"2000", "2 хил."},
		{"3000", "3 хил."},
		{"4000", "4 хил."},
		{"5000", "5 хил."},
		{"11000", "11 хил."},
		{"12000", "12 хил."},
		{"13000", "13 хил."},
		{"14000", "14 хил."},
		{"15000", "15 хил."},
		{"11100", "11,1 хил."},
		{"12100", "12,1 хил."},
		{"13100", "13,1 хил."},
		{"14100", "14,1 хил."},
		{"15100", "15,1 хил."},
		{"12500", "12,5 хил."},
		{"15000", "15 хил."},
		{"15100", "15,1 хил."},
		{"99500", "99,5 хил."},
		{"1000000", "1 млн."},
		{"1100000", "1,1 млн."},
		{"1200000", "1,2 млн."},
		{"1300000", "1,3 млн."},
		{"1400000", "1,4 млн."},
		{"1500000", "1,5 млн."},
		{"1600000", "1,6 млн."},
		{"1700000", "1,7 млн."},
		{"1800000", "1,8 млн."},
		{"1900000", "1,9 млн."},
		{"10000000", "10 млн."},
		{"11000000", "11 млн."},
		{"12000000", "12 млн."},
		{"13000000", "13 млн."},
		{"14000000", "14 млн."},
		{"15000000", "15 млн."},
		{"16000000", "16 млн."},
		{"17000000", "17 млн."},
		{"18000000", "18 млн."},
		{"19000000", "19 млн."},
		{"20000000", "20 млн."},
		{"21000000", "21 млн."},
		{"22000000", "22 млн."},
		{"23000000", "23 млн."},
		{"24000000", "24 млн."},
		{"25000000", "25 млн."},
		{"26000000", "26 млн."},
		{"27000000", "27 млн."},
		{"28000000", "28 млн."},

		{"1000000000", "1 млрд."},
		{"1100000000", "1,1 млрд."},
		{"1200000000", "1,2 млрд."},
		{"1300000000", "1,3 млрд."},
		{"1400000000", "1,4 млрд."},
		{"1500000000", "1,5 млрд."},
		{"1600000000", "1,6 млрд."},

		{"1000000000000", "1 трлн."},
		{"1100000000000", "1,1 трлн."},
		{"1200000000000", "1,2 трлн."},
		{"1300000000000", "1,3 трлн."},
		{"1400000000000", "1,4 трлн."},
		{"1500000000000", "1,5 трлн."},
		{"1600000000000", "1,6 трлн."},
		{"1700000000000", "1,7 трлн."},
		{"1800000000000", "1,8 трлн."},
		{"1900000000000", "1,9 трлн."},
		{"2000000000000", "2 трлн."},
	}

	h := humanize.New(locale.Data, humanize.Short, fallback)

	for _, tt := range tests {
		res, err := h.Humanize(tt.number)
		if err != nil {
			t.Errorf("[SHORT] number %q => unexpected error: %v", tt.number, err)
			continue
		}
		if res != tt.expected {
			t.Errorf("[SHORT] number %q => got %q, want %q", tt.number, res, tt.expected)
		}
	}
}
