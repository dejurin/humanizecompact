package locale_test

import (
	"testing"

	"github.com/dejurin/humanize-cldr"
	locale "github.com/dejurin/humanize-cldr/locales/ar"
)

func fallback(number string) string {
	return number
}

func TestHumanizeArOptionLong(t *testing.T) {
	tests := []struct {
		number   string
		expected string
	}{
		{"1", "1"},                         // fallback
		{"9999", "9999"},                   // fallback
		{"100100", "100100"},               // fallback
		{"100001", "100001"},               // fallback
		{"1230000", "1230000"},             // fallback
		{"1234000", "1234000"},             // fallback
		{"1234200", "1234200"},             // fallback
		{"1234500", "1234500"},             // fallback
		{"2340000", "2340000"},             // fallback
		{"2345678", "2345678"},             // fallback
		{"1000000.1", "1000000.1"},         // fallback
		{"1234000000", "1234000000"},       // fallback
		{"1234000001", "1234000001"},       // fallback
		{"1234500000", "1234500000"},       // fallback
		{"1910000000000", "1910000000000"}, // fallback
		{"100100000", "100100000"},         // fallback
		{"1000", "١ ألف"},
		{"2000", "٢ ألف"},
		{"3000", "٣ آلاف"},
		{"4000", "٤ آلاف"},
		{"5000", "٥ آلاف"},
		{"10000", "١٠ آلاف"},
		{"11000", "١١ ألف"},
		{"12000", "١٢ ألف"},
		{"13000", "١٣ ألف"},
		{"14000", "١٤ ألف"},
		{"15000", "١٥ ألف"},
		{"11100", "١١٫١ ألف"},
		{"12100", "١٢٫١ ألف"},
		{"13100", "١٣٫١ ألف"},
		{"14100", "١٤٫١ ألف"},
		{"15100", "١٥٫١ ألف"},
		{"12500", "١٢٫٥ ألف"},
		{"15000", "١٥ ألف"},
		{"15100", "١٥٫١ ألف"},
		{"99500", "٩٩٫٥ ألف"},
		{"1000000", "١ مليون"},
		{"10100000", "١٠٫١ مليون"},
		{"1100000", "١٫١ مليون"},
		{"1200000", "١٫٢ مليون"},
		{"1300000", "١٫٣ مليون"},
		{"1400000", "١٫٤ مليون"},
		{"1500000", "١٫٥ مليون"},
		{"1600000", "١٫٦ مليون"},
		{"1700000", "١٫٧ مليون"},
		{"1800000", "١٫٨ مليون"},
		{"1900000", "١٫٩ مليون"},
		{"99900000", "٩٩٫٩ مليون"},
		{"99900000000", "٩٩٫٩ مليار"},
		{"99900000000000", "٩٩٫٩ ترليون"},
		{"2000000", "٢ مليون"},
		{"2300000", "٢٫٣ مليون"},
		{"1700000000", "١٫٧ مليار"},
		{"1000000000", "١ مليار"},
		{"1100000000", "١٫١ مليار"},
		{"1200000000", "١٫٢ مليار"},
		{"1300000000", "١٫٣ مليار"},
		{"1400000000", "١٫٤ مليار"},
		{"1500000000", "١٫٥ مليار"},
		{"1600000000", "١٫٦ مليار"},
		{"1700000000", "١٫٧ مليار"},
		{"1800000000", "١٫٨ مليار"},
		{"1900000000", "١٫٩ مليار"},
		{"2000000000", "٢ مليار"},
		{"3000000000", "٣ مليار"},
		{"4000000000", "٤ مليار"},
		{"5000000000", "٥ مليار"},
		{"6000000000", "٦ مليار"},
		{"7000000000", "٧ مليار"},
		{"8000000000", "٨ مليار"},
		{"9000000000", "٩ مليار"},
		{"10000000000", "١٠ مليار"},
		{"11000000000", "١١ مليار"},
		{"12000000000", "١٢ مليار"},
		{"13000000000", "١٣ مليار"},
		{"14000000000", "١٤ مليار"},
		{"15000000000", "١٥ مليار"},
		{"16000000000", "١٦ مليار"},
		{"17000000000", "١٧ مليار"},
		{"18000000000", "١٨ مليار"},
		{"19000000000", "١٩ مليار"},
		{"20000000000", "٢٠ مليار"},
		{"100000000000", "١٠٠ مليار"},
		{"200000000000", "٢٠٠ مليار"},
		{"300000000000", "٣٠٠ مليار"},
		{"400000000000", "٤٠٠ مليار"},
		{"500000000000", "٥٠٠ مليار"},
		{"600000000000", "٦٠٠ مليار"},
		{"700000000000", "٧٠٠ مليار"},
		{"800000000000", "٨٠٠ مليار"},
		{"900000000000", "٩٠٠ مليار"},
		{"1000000000000", "١ ترليون"},
		{"1100000000000", "١٫١ ترليون"},
		{"1200000000000", "١٫٢ ترليون"},
		{"1300000000000", "١٫٣ ترليون"},
		{"1400000000000", "١٫٤ ترليون"},
		{"1500000000000", "١٫٥ ترليون"},
		{"1600000000000", "١٫٦ ترليون"},
		{"1700000000000", "١٫٧ ترليون"},
		{"1800000000000", "١٫٨ ترليون"},
		{"1900000000000", "١٫٩ ترليون"},
		{"2000000000000", "٢ ترليون"},
		{"3000000000000", "٣ ترليون"},
		{"4000000000000", "٤ ترليون"},
		{"5000000000000", "٥ ترليون"},
		{"6000000000000", "٦ ترليون"},
		{"7000000000000", "٧ ترليون"},
		{"8000000000000", "٨ ترليون"},
		{"9000000000000", "٩ ترليون"},
		{"10000000000000", "١٠ ترليون"},
	}

	h := humanize.NewHumanizer(locale.Data, humanize.OptionLong, fallback)

	for _, tt := range tests {
		res, err := h.Humanize(tt.number)
		if err != nil {
			t.Errorf("number %q => unexpected error: %v", tt.number, err)
			continue
		}
		if res != tt.expected {
			t.Errorf("number %q => got %q, want %q", tt.number, res, tt.expected)
		}
	}
}

func TestHumanizeArOptionShort(t *testing.T) {
	tests := []struct {
		number   string
		expected string
	}{
		{"1000", "١ ألف"},
		{"10000", "١٠ آلاف"},
		{"11000", "١١ ألف"},
		{"12000", "١٢ ألف"},
		{"13000", "١٣ ألف"},
		{"14000", "١٤ ألف"},
		{"15000", "١٥ ألف"},
		{"11100", "١١٫١ ألف"},
		{"12100", "١٢٫١ ألف"},
		{"13100", "١٣٫١ ألف"},
		{"14100", "١٤٫١ ألف"},
		{"15100", "١٥٫١ ألف"},
		{"12500", "١٢٫٥ ألف"},
		{"15000", "١٥ ألف"},
		{"15100", "١٥٫١ ألف"},
		{"99500", "٩٩٫٥ ألف"},
		{"1000000", "١ مليون"},
		{"10100000", "١٠٫١ مليون"},
		{"1100000", "١٫١ مليون"},
		{"1200000", "١٫٢ مليون"},
		{"1300000", "١٫٣ مليون"},
		{"1400000", "١٫٤ مليون"},
		{"1500000", "١٫٥ مليون"},
		{"1600000", "١٫٦ مليون"},
		{"1700000", "١٫٧ مليون"},
		{"1800000", "١٫٨ مليون"},
		{"1900000", "١٫٩ مليون"},
		{"2000000", "٢ مليون"},
		{"2300000", "٢٫٣ مليون"},
		{"1700000000", "١٫٧ مليار"},
		{"1000000000", "١ مليار"},
		{"1100000000", "١٫١ مليار"},
		{"1200000000", "١٫٢ مليار"},
		{"1300000000", "١٫٣ مليار"},
		{"1400000000", "١٫٤ مليار"},
		{"1500000000", "١٫٥ مليار"},
		{"1600000000", "١٫٦ مليار"},
		{"1700000000", "١٫٧ مليار"},
		{"1800000000", "١٫٨ مليار"},
		{"1900000000", "١٫٩ مليار"},
		{"2000000000", "٢ مليار"},
	}

	h := humanize.NewHumanizer(locale.Data, humanize.OptionShort, fallback)

	for _, tt := range tests {
		res, err := h.Humanize(tt.number)
		if err != nil {
			t.Errorf("[SHORT] number %q => unexpected error: %v", tt.number, err)
			continue
		}
		if res != tt.expected {
			t.Errorf("[SHORT] number %q => got %q, want %q", tt.number, res, tt.expected)
		}
	}
}
